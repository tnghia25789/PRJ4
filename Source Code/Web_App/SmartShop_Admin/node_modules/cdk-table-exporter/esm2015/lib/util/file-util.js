import { ExportType } from '../export-type';
import * as FileSaver from 'file-saver-es';
import { MAT_TABLE_EXPORTER, DOT, XLS_REGEX } from '../constants';
export class FileUtil {
    static save(content, mime, options) {
        const blob = new Blob([content], { type: mime.contentTypeHeader });
        let fileName = MAT_TABLE_EXPORTER;
        if (options && options.fileName) {
            fileName = options.fileName;
        }
        FileSaver.saveAs(blob, fileName + mime.extension);
    }
    static isXls(fileName) {
        return fileName.toLowerCase().match(XLS_REGEX) != null;
    }
    static identifyExportType(fileName) {
        if (fileName && FileUtil.isXls(fileName)) {
            return ExportType.XLS;
        }
        else {
            return ExportType.XLSX;
        }
    }
    static removeExtension(options) {
        options.fileName = options.fileName.split(DOT)[0];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11dGlsLmpzIiwic291cmNlUm9vdCI6IkQ6L2FuZ3VsYXJfd29ya3NwYWNlL25nLW1hdGVyaWFsLWV4dGVuc2lvbnMvcHJvamVjdHMvY2RrLXRhYmxlLWV4cG9ydGVyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi91dGlsL2ZpbGUtdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxLQUFLLFNBQVMsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFJbEUsTUFBTSxPQUFPLFFBQVE7SUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQWUsRUFBRSxJQUFVLEVBQUUsT0FBaUI7UUFDL0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUMsQ0FBQyxDQUFDO1FBQ2pFLElBQUksUUFBUSxHQUFHLGtCQUFrQixDQUFDO1FBQ2xDLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDL0IsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7U0FDN0I7UUFDRCxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQWdCO1FBQ2xDLE9BQU8sUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDekQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxRQUFpQjtRQUNoRCxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3hDLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQztTQUN2QjthQUFNO1lBQ0wsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVNLE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBaUI7UUFDN0MsT0FBTyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHBvcnRUeXBlIH0gZnJvbSAnLi4vZXhwb3J0LXR5cGUnO1xyXG5pbXBvcnQgKiBhcyBGaWxlU2F2ZXIgZnJvbSAnZmlsZS1zYXZlci1lcyc7XHJcbmltcG9ydCB7IE1BVF9UQUJMRV9FWFBPUlRFUiwgRE9ULCBYTFNfUkVHRVggfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBNaW1lIH0gZnJvbSAnLi4vbWltZSc7XHJcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tICcuLi9vcHRpb25zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWxlVXRpbCB7XHJcbiAgcHVibGljIHN0YXRpYyBzYXZlKGNvbnRlbnQ6IHN0cmluZywgbWltZTogTWltZSwgb3B0aW9ucz86IE9wdGlvbnMpIHtcclxuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbY29udGVudF0sIHt0eXBlOiBtaW1lLmNvbnRlbnRUeXBlSGVhZGVyfSk7XHJcbiAgICBsZXQgZmlsZU5hbWUgPSBNQVRfVEFCTEVfRVhQT1JURVI7XHJcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmZpbGVOYW1lKSB7XHJcbiAgICAgIGZpbGVOYW1lID0gb3B0aW9ucy5maWxlTmFtZTtcclxuICAgIH1cclxuICAgIEZpbGVTYXZlci5zYXZlQXMoYmxvYiwgZmlsZU5hbWUgKyBtaW1lLmV4dGVuc2lvbik7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGlzWGxzKGZpbGVOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBmaWxlTmFtZS50b0xvd2VyQ2FzZSgpLm1hdGNoKFhMU19SRUdFWCkgIT0gbnVsbDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgaWRlbnRpZnlFeHBvcnRUeXBlKGZpbGVOYW1lPzogc3RyaW5nKTogRXhwb3J0VHlwZSB7XHJcbiAgICBpZiAoZmlsZU5hbWUgJiYgRmlsZVV0aWwuaXNYbHMoZmlsZU5hbWUpKSB7XHJcbiAgICAgIHJldHVybiBFeHBvcnRUeXBlLlhMUztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBFeHBvcnRUeXBlLlhMU1g7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlbW92ZUV4dGVuc2lvbihvcHRpb25zPzogT3B0aW9ucykge1xyXG4gICAgb3B0aW9ucy5maWxlTmFtZSA9IG9wdGlvbnMuZmlsZU5hbWUuc3BsaXQoRE9UKVswXTtcclxuICB9XHJcbn1cclxuIl19