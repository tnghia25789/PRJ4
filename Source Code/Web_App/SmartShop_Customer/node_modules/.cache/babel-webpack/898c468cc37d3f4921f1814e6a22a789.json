{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nconst _c0 = [\"payPalButtonContainer\"];\n\nclass ScriptService {\n  constructor(zone) {\n    this.zone = zone;\n  }\n\n  registerScript(url, globalVar, onReady) {\n    const existingGlobalVar = window[globalVar];\n\n    if (existingGlobalVar) {\n      // global variable is present = script was already loaded\n      this.zone.run(() => {\n        onReady(existingGlobalVar);\n      });\n      return;\n    } // prepare script elem\n\n\n    const scriptElem = document.createElement('script');\n    scriptElem.id = this.getElemId(globalVar);\n    scriptElem.innerHTML = '';\n\n    scriptElem.onload = () => {\n      this.zone.run(() => {\n        onReady(window[globalVar]);\n      });\n    };\n\n    scriptElem.src = url;\n    scriptElem.async = true;\n    scriptElem.defer = true; // add script to header\n\n    document.getElementsByTagName('head')[0].appendChild(scriptElem);\n  }\n\n  cleanup(globalVar) {\n    // remove script from DOM\n    const scriptElem = document.getElementById(this.getElemId(globalVar));\n\n    if (scriptElem) {\n      scriptElem.remove();\n    }\n  }\n\n  getElemId(globalVar) {\n    return `ngx-paypal-script-elem-${globalVar}`;\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nScriptService.ɵfac = function ScriptService_Factory(t) {\n  return new (t || ScriptService)(i0.ɵɵinject(i0.NgZone));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScriptService,\n  factory: ScriptService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScriptService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass PayPalScriptService {\n  constructor(scriptService) {\n    this.scriptService = scriptService;\n    this.paypalWindowName = 'paypal';\n  }\n\n  registerPayPalScript(config, onReady) {\n    this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n  }\n\n  destroyPayPalScript() {\n    this.scriptService.cleanup(this.paypalWindowName);\n  }\n\n  getUrlForConfig(config) {\n    const params = [{\n      name: 'client-id',\n      value: config.clientId\n    }];\n\n    if (config.currency) {\n      params.push({\n        name: 'currency',\n        value: config.currency\n      });\n    }\n\n    if (config.commit) {\n      params.push({\n        name: 'commit',\n        value: config.commit\n      });\n    }\n\n    if (config.vault) {\n      params.push({\n        name: 'vault',\n        value: config.vault\n      });\n    }\n\n    if (config.intent) {\n      params.push({\n        name: 'intent',\n        value: config.intent\n      });\n    }\n\n    if (config.extraParams) {\n      params.push(...config.extraParams);\n    }\n\n    return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n  }\n\n  getQueryString(queryParams) {\n    let queryString = '';\n\n    for (let i = 0; i < queryParams.length; i++) {\n      const queryParam = queryParams[i];\n\n      if (i === 0) {\n        queryString += '?';\n      } else {\n        queryString += '&';\n      }\n\n      queryString += `${queryParam.name}=${queryParam.value}`;\n    }\n\n    return queryString;\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nPayPalScriptService.ɵfac = function PayPalScriptService_Factory(t) {\n  return new (t || PayPalScriptService)(i0.ɵɵinject(ScriptService));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nPayPalScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PayPalScriptService,\n  factory: PayPalScriptService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PayPalScriptService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScriptService\n    }];\n  }, null);\n})();\n\nclass NgxPaypalComponent {\n  constructor(paypalScriptService, cdr, ngZone) {\n    this.paypalScriptService = paypalScriptService;\n    this.cdr = cdr;\n    this.ngZone = ngZone;\n    /**\r\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n     * sharing base configuration. In such a case only a single component may register script.\r\n     */\n\n    this.registerScript = true;\n    /**\r\n     * Emitted when paypal script is loaded\r\n     */\n\n    this.scriptLoaded = new EventEmitter();\n    this.ngUnsubscribe = new Subject();\n    /**\r\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n     */\n\n    this.initializePayPal = true;\n  }\n\n  set payPalButtonContainer(content) {\n    this.payPalButtonContainerElem = content;\n  }\n\n  ngOnChanges(changes) {\n    if (!this.payPalButtonContainerId) {\n      this.payPalButtonContainerId = this.generateElementId();\n    } // first time config setup\n\n\n    const config = this.config;\n\n    if (changes.config.isFirstChange()) {\n      if (config && this.registerScript) {\n        this.initPayPalScript(config, payPal => {\n          // store reference to paypal global script\n          this.payPal = payPal;\n          this.doPayPalCheck();\n        });\n      }\n    } // changes to config\n\n\n    if (!changes.config.isFirstChange()) {\n      this.reinitialize(config);\n    }\n  }\n\n  ngOnDestroy() {\n    this.paypalScriptService.destroyPayPalScript();\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  ngAfterViewInit() {\n    this.doPayPalCheck();\n  }\n\n  customInit(payPal) {\n    this.payPal = payPal;\n    this.doPayPalCheck();\n  }\n\n  reinitialize(config) {\n    this.config = config;\n    this.payPal = undefined;\n    this.paypalScriptService.destroyPayPalScript();\n    this.payPalButtonContainerId = this.generateElementId();\n    this.initializePayPal = true;\n\n    if (this.payPalButtonContainerElem) {\n      while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n        this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n      }\n    }\n\n    this.cdr.detectChanges();\n\n    if (this.config) {\n      if (!this.payPal) {\n        this.initPayPalScript(this.config, payPal => {\n          // store reference to paypal global script\n          this.payPal = payPal;\n          this.doPayPalCheck();\n        });\n      } else {\n        this.doPayPalCheck();\n      }\n    }\n  }\n\n  doPayPalCheck() {\n    if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n      // make sure that id is also set\n      if (this.payPalButtonContainerElem.nativeElement.id) {\n        this.initializePayPal = false;\n        this.initPayPal(this.config, this.payPal);\n      }\n    }\n  }\n\n  initPayPalScript(config, initPayPal) {\n    this.paypalScriptService.registerPayPalScript({\n      clientId: config.clientId,\n      commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n      currency: config.currency,\n      vault: config.vault,\n      intent: config.intent,\n      extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n    }, paypal => {\n      this.scriptLoaded.next(paypal);\n      initPayPal(paypal);\n    });\n  }\n\n  generateElementId() {\n    return `ngx-captcha-id-${new Date().valueOf()}`;\n  }\n\n  initPayPal(config, paypal) {\n    // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n    this.ngZone.runOutsideAngular(() => {\n      // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n      const createOrder = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.createOrderOnClient && config.createOrderOnServer) {\n            throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n          }\n\n          if (!config.createOrderOnClient && !config.createOrderOnServer) {\n            throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n          }\n\n          if (config.createOrderOnClient) {\n            return actions.order.create(config.createOrderOnClient(data));\n          }\n\n          if (config.createOrderOnServer) {\n            return config.createOrderOnServer(data);\n          }\n\n          throw Error(`Invalid state for 'createOrder'.`);\n        });\n      };\n\n      const createSubscription = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.createSubscriptionOnClient) {\n            return actions.subscription.create(config.createSubscriptionOnClient(data));\n          }\n        });\n      };\n\n      const onShippingChange = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.onShippingChange) {\n            return config.onShippingChange(data, actions);\n          }\n        });\n      };\n\n      const buttonsConfig = {\n        style: config.style,\n        onApprove: (data, actions) => {\n          return this.ngZone.run(() => {\n            if (config.onApprove) {\n              config.onApprove(data, actions);\n            } // capture on server\n\n\n            if (config.authorizeOnServer) {\n              return config.authorizeOnServer(data, actions);\n            } // capture on client\n\n\n            const onClientAuthorization = config.onClientAuthorization;\n\n            if (onClientAuthorization) {\n              actions.order.capture().then(details => {\n                this.ngZone.run(() => {\n                  onClientAuthorization(details);\n                });\n              });\n              return;\n            }\n          });\n        },\n        onError: error => {\n          this.ngZone.run(() => {\n            if (config.onError) {\n              config.onError(error);\n            }\n          });\n        },\n        onCancel: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onCancel) {\n              config.onCancel(data, actions);\n            }\n          });\n        },\n        onClick: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onClick) {\n              config.onClick(data, actions);\n            }\n          });\n        },\n        onInit: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onInit) {\n              config.onInit(data, actions);\n            }\n          });\n        },\n        // Add the functions if they've been created in the config object\n        // The API only allows one of the two to be set\n        ...((config.createOrderOnClient || config.createOrderOnServer) && {\n          createOrder\n        }),\n        ...(config.createSubscriptionOnClient && {\n          createSubscription\n        }),\n        // The onShippingChange callback cannot be used with subscriptions\n        // so we only add it if it is set\n        ...(config.onShippingChange && {\n          onShippingChange\n        })\n      };\n      paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n    });\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxPaypalComponent.ɵfac = function NgxPaypalComponent_Factory(t) {\n  return new (t || NgxPaypalComponent)(i0.ɵɵdirectiveInject(PayPalScriptService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxPaypalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxPaypalComponent,\n  selectors: [[\"ngx-paypal\"]],\n  viewQuery: function NgxPaypalComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.payPalButtonContainer = _t.first);\n    }\n  },\n  inputs: {\n    config: \"config\",\n    registerScript: \"registerScript\"\n  },\n  outputs: {\n    scriptLoaded: \"scriptLoaded\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[3, \"id\"], [\"payPalButtonContainer\", \"\"]],\n  template: function NgxPaypalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.payPalButtonContainerId);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPaypalComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: 'ngx-paypal',\n      template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    `\n    }]\n  }], function () {\n    return [{\n      type: PayPalScriptService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    config: [{\n      type: Input\n    }],\n    registerScript: [{\n      type: Input\n    }],\n    scriptLoaded: [{\n      type: Output\n    }],\n    payPalButtonContainer: [{\n      type: ViewChild,\n      args: ['payPalButtonContainer', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass NgxPayPalModule {}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxPayPalModule.ɵfac = function NgxPayPalModule_Factory(t) {\n  return new (t || NgxPayPalModule)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxPayPalModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxPayPalModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\n\nNgxPayPalModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ScriptService, PayPalScriptService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPayPalModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxPaypalComponent],\n      exports: [NgxPaypalComponent],\n      providers: [ScriptService, PayPalScriptService]\n    }]\n  }], null, null);\n})();\n/** Public API */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService }; //# sourceMappingURL=ngx-paypal.mjs.map","map":{"version":3,"sources":["C:/Users/Admin/Downloads/ProjectSem4-SmartShop/SmartShop_Customer/node_modules/ngx-paypal/fesm2020/ngx-paypal.mjs"],"names":["CommonModule","i0","Injectable","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","ViewChild","NgModule","Subject","ScriptService","constructor","zone","registerScript","url","globalVar","onReady","existingGlobalVar","window","run","scriptElem","document","createElement","id","getElemId","innerHTML","onload","src","async","defer","getElementsByTagName","appendChild","cleanup","getElementById","remove","ɵfac","NgZone","ɵprov","type","PayPalScriptService","scriptService","paypalWindowName","registerPayPalScript","config","getUrlForConfig","destroyPayPalScript","params","name","value","clientId","currency","push","commit","vault","intent","extraParams","getQueryString","queryParams","queryString","i","length","queryParam","NgxPaypalComponent","paypalScriptService","cdr","ngZone","scriptLoaded","ngUnsubscribe","initializePayPal","payPalButtonContainer","content","payPalButtonContainerElem","ngOnChanges","changes","payPalButtonContainerId","generateElementId","isFirstChange","initPayPalScript","payPal","doPayPalCheck","reinitialize","ngOnDestroy","next","complete","ngAfterViewInit","customInit","undefined","nativeElement","firstChild","removeChild","detectChanges","initPayPal","advanced","extraQueryParams","paypal","Date","valueOf","runOutsideAngular","createOrder","data","actions","createOrderOnClient","createOrderOnServer","Error","order","create","createSubscription","createSubscriptionOnClient","subscription","onShippingChange","buttonsConfig","style","onApprove","authorizeOnServer","onClientAuthorization","capture","then","details","onError","error","onCancel","onClick","onInit","Buttons","render","ChangeDetectorRef","ɵcmp","args","changeDetection","OnPush","selector","template","static","NgxPayPalModule","ɵmod","ɵinj","imports","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nclass ScriptService {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n    }\r\n    registerScript(url, globalVar, onReady) {\r\n        const existingGlobalVar = window[globalVar];\r\n        if (existingGlobalVar) {\r\n            // global variable is present = script was already loaded\r\n            this.zone.run(() => {\r\n                onReady(existingGlobalVar);\r\n            });\r\n            return;\r\n        }\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.id = this.getElemId(globalVar);\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.onload = () => {\r\n            this.zone.run(() => {\r\n                onReady(window[globalVar]);\r\n            });\r\n        };\r\n        scriptElem.src = url;\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n    cleanup(globalVar) {\r\n        // remove script from DOM\r\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\r\n        if (scriptElem) {\r\n            scriptElem.remove();\r\n        }\r\n    }\r\n    getElemId(globalVar) {\r\n        return `ngx-paypal-script-elem-${globalVar}`;\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ ScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ScriptService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ /** @nocollapse */ ScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ScriptService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ScriptService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass PayPalScriptService {\r\n    constructor(scriptService) {\r\n        this.scriptService = scriptService;\r\n        this.paypalWindowName = 'paypal';\r\n    }\r\n    registerPayPalScript(config, onReady) {\r\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\r\n    }\r\n    destroyPayPalScript() {\r\n        this.scriptService.cleanup(this.paypalWindowName);\r\n    }\r\n    getUrlForConfig(config) {\r\n        const params = [\r\n            {\r\n                name: 'client-id',\r\n                value: config.clientId\r\n            }\r\n        ];\r\n        if (config.currency) {\r\n            params.push({\r\n                name: 'currency',\r\n                value: config.currency\r\n            });\r\n        }\r\n        if (config.commit) {\r\n            params.push({\r\n                name: 'commit',\r\n                value: config.commit\r\n            });\r\n        }\r\n        if (config.vault) {\r\n            params.push({\r\n                name: 'vault',\r\n                value: config.vault\r\n            });\r\n        }\r\n        if (config.intent) {\r\n            params.push({\r\n                name: 'intent',\r\n                value: config.intent\r\n            });\r\n        }\r\n        if (config.extraParams) {\r\n            params.push(...config.extraParams);\r\n        }\r\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\r\n    }\r\n    getQueryString(queryParams) {\r\n        let queryString = '';\r\n        for (let i = 0; i < queryParams.length; i++) {\r\n            const queryParam = queryParams[i];\r\n            if (i === 0) {\r\n                queryString += '?';\r\n            }\r\n            else {\r\n                queryString += '&';\r\n            }\r\n            queryString += `${queryParam.name}=${queryParam.value}`;\r\n        }\r\n        return queryString;\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ PayPalScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: PayPalScriptService, deps: [{ token: ScriptService }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ /** @nocollapse */ PayPalScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: PayPalScriptService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: PayPalScriptService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: ScriptService }]; } });\n\nclass NgxPaypalComponent {\r\n    constructor(paypalScriptService, cdr, ngZone) {\r\n        this.paypalScriptService = paypalScriptService;\r\n        this.cdr = cdr;\r\n        this.ngZone = ngZone;\r\n        /**\r\n         * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n         * sharing base configuration. In such a case only a single component may register script.\r\n         */\r\n        this.registerScript = true;\r\n        /**\r\n         * Emitted when paypal script is loaded\r\n         */\r\n        this.scriptLoaded = new EventEmitter();\r\n        this.ngUnsubscribe = new Subject();\r\n        /**\r\n         * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n         */\r\n        this.initializePayPal = true;\r\n    }\r\n    set payPalButtonContainer(content) {\r\n        this.payPalButtonContainerElem = content;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this.payPalButtonContainerId) {\r\n            this.payPalButtonContainerId = this.generateElementId();\r\n        }\r\n        // first time config setup\r\n        const config = this.config;\r\n        if (changes.config.isFirstChange()) {\r\n            if (config && this.registerScript) {\r\n                this.initPayPalScript(config, (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            }\r\n        }\r\n        // changes to config\r\n        if (!changes.config.isFirstChange()) {\r\n            this.reinitialize(config);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.doPayPalCheck();\r\n    }\r\n    customInit(payPal) {\r\n        this.payPal = payPal;\r\n        this.doPayPalCheck();\r\n    }\r\n    reinitialize(config) {\r\n        this.config = config;\r\n        this.payPal = undefined;\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.payPalButtonContainerId = this.generateElementId();\r\n        this.initializePayPal = true;\r\n        if (this.payPalButtonContainerElem) {\r\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\r\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\r\n            }\r\n        }\r\n        this.cdr.detectChanges();\r\n        if (this.config) {\r\n            if (!this.payPal) {\r\n                this.initPayPalScript(this.config, (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            }\r\n            else {\r\n                this.doPayPalCheck();\r\n            }\r\n        }\r\n    }\r\n    doPayPalCheck() {\r\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\r\n            // make sure that id is also set\r\n            if (this.payPalButtonContainerElem.nativeElement.id) {\r\n                this.initializePayPal = false;\r\n                this.initPayPal(this.config, this.payPal);\r\n            }\r\n        }\r\n    }\r\n    initPayPalScript(config, initPayPal) {\r\n        this.paypalScriptService.registerPayPalScript({\r\n            clientId: config.clientId,\r\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\r\n            currency: config.currency,\r\n            vault: config.vault,\r\n            intent: config.intent,\r\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\r\n        }, (paypal) => {\r\n            this.scriptLoaded.next(paypal);\r\n            initPayPal(paypal);\r\n        });\r\n    }\r\n    generateElementId() {\r\n        return `ngx-captcha-id-${new Date().valueOf()}`;\r\n    }\r\n    initPayPal(config, paypal) {\r\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\r\n        this.ngZone.runOutsideAngular(() => {\r\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\r\n            const createOrder = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\r\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\r\n                    Please choose one or the other.`);\r\n                    }\r\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\r\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\r\n                    Please define one of these to create order.`);\r\n                    }\r\n                    if (config.createOrderOnClient) {\r\n                        return actions.order.create(config.createOrderOnClient(data));\r\n                    }\r\n                    if (config.createOrderOnServer) {\r\n                        return config.createOrderOnServer(data);\r\n                    }\r\n                    throw Error(`Invalid state for 'createOrder'.`);\r\n                });\r\n            };\r\n            const createSubscription = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.createSubscriptionOnClient) {\r\n                        return actions.subscription.create(config.createSubscriptionOnClient(data));\r\n                    }\r\n                });\r\n            };\r\n            const onShippingChange = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.onShippingChange) {\r\n                        return config.onShippingChange(data, actions);\r\n                    }\r\n                });\r\n            };\r\n            const buttonsConfig = {\r\n                style: config.style,\r\n                onApprove: (data, actions) => {\r\n                    return this.ngZone.run(() => {\r\n                        if (config.onApprove) {\r\n                            config.onApprove(data, actions);\r\n                        }\r\n                        // capture on server\r\n                        if (config.authorizeOnServer) {\r\n                            return config.authorizeOnServer(data, actions);\r\n                        }\r\n                        // capture on client\r\n                        const onClientAuthorization = config.onClientAuthorization;\r\n                        if (onClientAuthorization) {\r\n                            actions.order.capture().then((details) => {\r\n                                this.ngZone.run(() => {\r\n                                    onClientAuthorization(details);\r\n                                });\r\n                            });\r\n                            return;\r\n                        }\r\n                    });\r\n                },\r\n                onError: (error) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onError) {\r\n                            config.onError(error);\r\n                        }\r\n                    });\r\n                },\r\n                onCancel: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onCancel) {\r\n                            config.onCancel(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onClick: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onClick) {\r\n                            config.onClick(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onInit: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onInit) {\r\n                            config.onInit(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                // Add the functions if they've been created in the config object\r\n                // The API only allows one of the two to be set\r\n                ...((config.createOrderOnClient || config.createOrderOnServer) && { createOrder }),\r\n                ...((config.createSubscriptionOnClient) && { createSubscription }),\r\n                // The onShippingChange callback cannot be used with subscriptions\r\n                // so we only add it if it is set\r\n                ...(config.onShippingChange && { onShippingChange })\r\n            };\r\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\r\n        });\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxPaypalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPaypalComponent, deps: [{ token: PayPalScriptService }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ /** @nocollapse */ NgxPaypalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.3\", type: NgxPaypalComponent, selector: \"ngx-paypal\", inputs: { config: \"config\", registerScript: \"registerScript\" }, outputs: { scriptLoaded: \"scriptLoaded\" }, viewQueries: [{ propertyName: \"payPalButtonContainer\", first: true, predicate: [\"payPalButtonContainer\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n    `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPaypalComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    selector: 'ngx-paypal',\r\n                    template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PayPalScriptService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }], registerScript: [{\r\n                type: Input\r\n            }], scriptLoaded: [{\r\n                type: Output\r\n            }], payPalButtonContainer: [{\r\n                type: ViewChild,\r\n                args: ['payPalButtonContainer', { static: false }]\r\n            }] } });\n\nclass NgxPayPalModule {\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxPayPalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPayPalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ /** @nocollapse */ NgxPayPalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPayPalModule, declarations: [NgxPaypalComponent], imports: [CommonModule], exports: [NgxPaypalComponent] });\r\n/** @nocollapse */ /** @nocollapse */ NgxPayPalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPayPalModule, providers: [\r\n        ScriptService,\r\n        PayPalScriptService\r\n    ], imports: [[\r\n            CommonModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPayPalModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        NgxPaypalComponent,\r\n                    ],\r\n                    exports: [\r\n                        NgxPaypalComponent,\r\n                    ],\r\n                    providers: [\r\n                        ScriptService,\r\n                        PayPalScriptService\r\n                    ]\r\n                }]\r\n        }] });\n\n/** Public API */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService };\n//# sourceMappingURL=ngx-paypal.mjs.map\n"]},"metadata":{},"sourceType":"module"}