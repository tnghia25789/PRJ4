export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"paypal-models.js","sourceRoot":"","sources":["../../../../src/lib/models/paypal-models.ts"],"names":[],"mappings":"","sourcesContent":["\r\nexport interface IPayPalConfig {\r\n    /**\r\n     * Currency - Defaults to USD if not provided\r\n     */\r\n    currency?: string;\r\n\r\n    /**\r\n    * Use when creating order on client\r\n    */\r\n    createOrderOnClient?: (data: any) => ICreateOrderRequest;\r\n\r\n    /**\r\n    * Use when creating subscription on client\r\n    */    \r\n    createSubscriptionOnClient?: (data: any) => ICreateSubscriptionRequest;\r\n\r\n    /**\r\n     * Use for creating orders on server. PayPal expects you to return 'orderId' in this method\r\n     */\r\n    createOrderOnServer?: (data: any) => Promise<string>;\r\n\r\n    /**\r\n     * Advanced configuration\r\n     */\r\n    advanced?: IAdvancedConfiguration;\r\n\r\n    /**\r\n     * Client id\r\n     */\r\n    clientId: string;\r\n\r\n    /**\r\n     * Shipping callback\r\n     * see https://developer.paypal.com/docs/checkout/integration-features/shipping-callback/\r\n     */\r\n    onShippingChange?: OnShippingChangeCallback;\r\n\r\n    /**\r\n     * Called when 'onApprove' event occurs\r\n     */\r\n    onApprove?: (data: IOnApproveCallbackData, actions: any) => void;\r\n\r\n    /**\r\n    * Called when authorization on client succeeds\r\n    */\r\n    onClientAuthorization?: (authorization: IClientAuthorizeCallbackData) => void;\r\n\r\n    /**\r\n     * Implement for authorizing on server side\r\n     */\r\n    authorizeOnServer?: (data: IOnApproveCallbackData, actions: any) => Promise<any>;\r\n\r\n    /**\r\n     * Button style configuration\r\n     */\r\n    style?: IPayPalButtonStyle;\r\n\r\n    /**\r\n     * Error handler\r\n     */\r\n    onError?: (err: any) => void;\r\n\r\n    /**\r\n     * Click handler\r\n     */\r\n    onClick?: (data: any, actions: IOnClickCallbackActions) => void;\r\n\r\n    /**\r\n     * Cancel handler\r\n     */\r\n    onCancel?: (data: ICancelCallbackData, actions: any) => void;\r\n\r\n    /**\r\n     * Init handler.\r\n     * can be used for validation, see: https://developer.paypal.com/docs/checkout/integration-features/validation/#\r\n     */\r\n    onInit?: (data: IInitCallbackData, actions: IOnInitCallbackActions) => void;\r\n\r\n    /**\r\n     * Create subscription handler\r\n     * https://developer.paypal.com/docs/subscriptions/integrate/\r\n     *\r\n     * Note: the vault property in the advanced configuration also has to be set to true\r\n     */\r\n    createSubscription?: (data: any) => ICreateSubscriptionRequest;\r\n\r\n    /**\r\n     * Vault - must be set to true when creating subscriptions\r\n     */\r\n    vault?: TrueFalse;\r\n    intent?: OrderIntent;\r\n}\r\n\r\nexport type TrueFalse = 'true' | 'false';\r\n\r\nexport interface IPayPalUrlConfig {\r\n    clientId: string;\r\n    currency?: string;\r\n    commit?: TrueFalse;\r\n    vault?: TrueFalse;\r\n    intent?: OrderIntent;\r\n    extraParams?: IQueryParam[];\r\n}\r\n\r\nexport interface IOrderDetails {\r\n    create_time: string;\r\n    update_time: string;\r\n    id: string;\r\n    intent: OrderIntent;\r\n    payer: IPayer;\r\n    status: OrderStatus;\r\n    links: ILinkDescription[];\r\n    purchase_units: IPurchaseUnit[];\r\n}\r\n\r\nexport interface IClientAuthorizeCallbackData extends IOrderDetails {\r\n    links: ILinkDescription[];\r\n}\r\n\r\nexport interface ILinkDescription {\r\n    href: string;\r\n    rel: String;\r\n    method?: LinkMethod;\r\n}\r\n\r\nexport interface IQueryParam {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\nexport type OnShippingChangeCallback = (data: IOnShippingChangeData, actions: IOnShippingChangeActions) => any;\r\n\r\nexport interface IOnShippingChangeData {\r\n    paymentToken: string;\r\n    shipping_address: any;\r\n    selected_shipping_method?: any;\r\n}\r\n\r\nexport interface IOnShippingChangeActions {\r\n    resolve: () => any;\r\n    reject: () => any;\r\n    patch: () => any;\r\n}\r\n\r\nexport type LinkMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'PATCH';\r\n\r\nexport interface IAdvancedConfiguration {\r\n    commit?: TrueFalse;\r\n    extraQueryParams?: IQueryParam[];\r\n}\r\n\r\nexport interface IOnApproveCallbackData {\r\n    orderID: string;\r\n    payerID: string;\r\n    subscriptionID: string;\r\n}\r\n\r\nexport interface ICreateOrderCallbackActions {\r\n    order: {\r\n        create: (order: ICreateOrderRequest) => Promise<any>;\r\n    };\r\n}\r\n\r\nexport interface ICancelCallbackData {\r\n    orderID: string;\r\n}\r\n\r\nexport interface IOnApproveCallbackActions {\r\n    redirect: () => void;\r\n    restart: () => void;\r\n    order: {\r\n        authorize: () => Promise<any>;\r\n        capture: () => Promise<any>;\r\n        get: () => Promise<IOrderDetails>;\r\n        patch: () => Promise<any>;\r\n    };\r\n}\r\n\r\nexport interface IOnInitCallbackActions {\r\n    enable: () => void;\r\n    disable: () => void;\r\n}\r\n\r\nexport interface ICreateSubscriptionCallbackActions {\r\n    subscription: {\r\n        create: (subscription: ICreateSubscriptionRequest) => Promise<any>;\r\n    };\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface IInitCallbackData {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface ICreateSubscriptionCallbackData {\r\n}\r\n\r\nexport interface IOnClickCallbackActions {\r\n    resolve: () => void;\r\n    reject: () => void;\r\n}\r\n\r\nexport interface IPayPalButtonStyle {\r\n    label?: 'paypal' | 'checkout' | 'pay' | 'installment' | 'buynow' | 'subscribe';\r\n    size?: 'small' | 'medium' | 'large' | 'responsive';\r\n    shape?: 'pill' | 'rect';\r\n    color?: 'gold' | 'blue' | 'silver' | 'white' | 'black';\r\n    layout?: 'horizontal' | 'vertical';\r\n    tagline?: boolean;\r\n    height?: number;\r\n    fundingicons?: boolean;\r\n}\r\n\r\nexport interface ICreateOrderRequest {\r\n    intent: OrderIntent;\r\n    purchase_units: IPurchaseUnit[];\r\n\r\n    payer?: IPayer;\r\n    application_context?: IApplicationContext;\r\n\r\n}\r\n\r\nexport interface ICreateSubscriptionRequest {\r\n    plan_id: string;\r\n    quantity?: number;\r\n}\r\n\r\nexport interface IPayer {\r\n    name?: IPartyName;\r\n    email_address?: string;\r\n    payer_id?: string;\r\n    birth_date?: string;\r\n    tax_info?: ITaxInfo;\r\n    address?: IAddressPortable;\r\n    phone?: IPhone;\r\n}\r\n\r\nexport interface IApplicationContext {\r\n    brand_name?: string;\r\n    locale?: string;\r\n    landing_page?: PaypalLandingPage;\r\n    shipping_preference?: ShippingPreference;\r\n    user_action?: PayPalUserAction;\r\n    payment_method?: IPaymentMethod;\r\n    return_url?: string;\r\n    cancel_url?: string;\r\n}\r\n\r\nexport interface IPaymentMethod {\r\n    payer_selected?: PayerSelected;\r\n    payee_preferred?: PayeePreferred;\r\n}\r\n\r\nexport type PayeePreferred = 'UNRESTRICTED' | 'IMMEDIATE_PAYMENT_REQUIRED';\r\n\r\nexport type PayerSelected = 'PAYPAL_CREDIT' | 'PAYPAL';\r\n\r\nexport type PayPalUserAction = 'CONTINUE' | 'PAY_NOW';\r\n\r\nexport type ShippingPreference = 'GET_FROM_FILE' | 'NO_SHIPPING' | 'SET_PROVIDED_ADDRESS';\r\n\r\nexport type PaypalLandingPage = 'LOGIN' | 'BILLING';\r\n\r\nexport type OrderIntent = 'CAPTURE' | 'AUTHORIZE' | 'subscription';\r\n\r\nexport type DisbursementMode = 'INSTANT' | 'DELAYED';\r\n\r\nexport type ItemCategory = 'DIGITAL_GOODS' | 'PHYSICAL_GOODS';\r\n\r\nexport type PhoneType = 'FAX' | 'HOME' | 'MOBILE' | 'OTHER' | 'PAGER';\r\n\r\nexport type TaxIdType = 'BR_CPF' | 'BR_CNPJ';\r\n\r\nexport interface IPhone {\r\n    phone_type?: PhoneType;\r\n    phone_number?: IPhoneNumber;\r\n}\r\n\r\nexport interface ITaxInfo {\r\n    tax_id: string;\r\n    tax_id_type: TaxIdType;\r\n}\r\n\r\nexport interface IPhoneNumber {\r\n    national_number: string;\r\n}\r\n\r\nexport interface IPurchaseUnit {\r\n    amount: IUnitAmount;\r\n\r\n    reference_id?: string;\r\n    payee?: IPayee;\r\n    payment_instruction?: IPaymentInstructions;\r\n    description?: string;\r\n    custom_id?: string;\r\n    invoice_id?: string;\r\n    soft_descriptor?: string;\r\n    items: ITransactionItem[];\r\n    shipping?: IShipping;\r\n}\r\n\r\nexport interface IPayee {\r\n    email_address?: string;\r\n    merchant_id?: string;\r\n}\r\n\r\nexport interface IPaymentInstructions {\r\n    platform_fees?: IPlatformFee[];\r\n    disbursement_mode?: DisbursementMode;\r\n}\r\n\r\nexport interface IPlatformFee {\r\n    amount: IUnitAmount;\r\n    payee?: IPayee;\r\n}\r\n\r\nexport interface ITransactionItem {\r\n    name: string;\r\n    unit_amount: IUnitAmount;\r\n    quantity: string;\r\n\r\n    description?: string;\r\n    sku?: string;\r\n    category?: ItemCategory;\r\n    tax?: ITax;\r\n}\r\n\r\nexport interface ITax {\r\n    currency_code: string;\r\n    value: string;\r\n}\r\n\r\nexport interface IUnitAmount {\r\n    currency_code: string;\r\n    value: string;\r\n    breakdown?: IUnitBreakdown;\r\n}\r\n\r\nexport interface IMoney {\r\n    currency_code: string;\r\n    value: string;\r\n}\r\n\r\nexport interface IUnitBreakdown {\r\n    item_total?: IUnitAmount;\r\n    shipping?: IUnitAmount;\r\n    handling?: IUnitAmount;\r\n    tax_total?: IUnitAmount;\r\n    insurance?: IUnitAmount;\r\n    shipping_discount?: IUnitAmount;\r\n    discount?: IMoney;\r\n}\r\n\r\nexport interface IPartyName {\r\n    prefix?: string;\r\n    given_name?: string;\r\n    surname?: string;\r\n    middle_name?: string;\r\n    suffix?: string;\r\n    alternate_full_name?: string;\r\n    full_name?: string;\r\n}\r\n\r\nexport interface IAddressPortable {\r\n    country_code: string;\r\n\r\n    address_line_1?: string;\r\n    address_line_2?: string;\r\n    admin_area_2?: string;\r\n    admin_area_1?: string;\r\n    postal_code?: string;\r\n}\r\n\r\nexport interface IShipping {\r\n    name?: IPartyName;\r\n    address?: IAddressPortable;\r\n}\r\n\r\nexport type OrderStatus = 'APPROVED' | 'SAVED' | 'CREATED' | 'VOIDED' | 'COMPLETED';\r\n\r\n\r\n"]}